//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MiniProject_1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MiniProjectTicketBooking1Entities : DbContext
    {
        public MiniProjectTicketBooking1Entities()
            : base("name=MiniProjectTicketBooking1Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<Cancellation> Cancellations { get; set; }
        public virtual DbSet<Train> Trains { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        [DbFunction("MiniProjectTicketBooking1Entities", "SplitString")]
        public virtual IQueryable<SplitString_Result> SplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("String", @string) :
                new ObjectParameter("String", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitString_Result>("[MiniProjectTicketBooking1Entities].[SplitString](@String, @Delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual int ActivateTrain(Nullable<int> trainId)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("TrainId", trainId) :
                new ObjectParameter("TrainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ActivateTrain", trainIdParameter);
        }
    
        public virtual int AddTrain(Nullable<int> trainId, string trainName, string fromStation, string toStation, string trainManagerName, Nullable<int> totalBerths, Nullable<int> availableBerths, Nullable<decimal> fare1, Nullable<bool> isActive)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("TrainId", trainId) :
                new ObjectParameter("TrainId", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var fromStationParameter = fromStation != null ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(string));
    
            var toStationParameter = toStation != null ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(string));
    
            var trainManagerNameParameter = trainManagerName != null ?
                new ObjectParameter("TrainManagerName", trainManagerName) :
                new ObjectParameter("TrainManagerName", typeof(string));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("TotalBerths", totalBerths) :
                new ObjectParameter("TotalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("AvailableBerths", availableBerths) :
                new ObjectParameter("AvailableBerths", typeof(int));
    
            var fare1Parameter = fare1.HasValue ?
                new ObjectParameter("Fare1", fare1) :
                new ObjectParameter("Fare1", typeof(decimal));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrain", trainIdParameter, trainNameParameter, fromStationParameter, toStationParameter, trainManagerNameParameter, totalBerthsParameter, availableBerthsParameter, fare1Parameter, isActiveParameter);
        }
    
        public virtual int BookTicket(string loginId, string password, string trainName, string fromStation, string toStation, string trainManagerName, string passengerNames, Nullable<int> seatsBooked, Nullable<System.DateTime> bookingDate, Nullable<System.DateTime> dateOfTravel)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var fromStationParameter = fromStation != null ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(string));
    
            var toStationParameter = toStation != null ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(string));
    
            var trainManagerNameParameter = trainManagerName != null ?
                new ObjectParameter("TrainManagerName", trainManagerName) :
                new ObjectParameter("TrainManagerName", typeof(string));
    
            var passengerNamesParameter = passengerNames != null ?
                new ObjectParameter("PassengerNames", passengerNames) :
                new ObjectParameter("PassengerNames", typeof(string));
    
            var seatsBookedParameter = seatsBooked.HasValue ?
                new ObjectParameter("SeatsBooked", seatsBooked) :
                new ObjectParameter("SeatsBooked", typeof(int));
    
            var bookingDateParameter = bookingDate.HasValue ?
                new ObjectParameter("BookingDate", bookingDate) :
                new ObjectParameter("BookingDate", typeof(System.DateTime));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("DateOfTravel", dateOfTravel) :
                new ObjectParameter("DateOfTravel", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BookTicket", loginIdParameter, passwordParameter, trainNameParameter, fromStationParameter, toStationParameter, trainManagerNameParameter, passengerNamesParameter, seatsBookedParameter, bookingDateParameter, dateOfTravelParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> CancelTicket(Nullable<int> bookingId, Nullable<int> seatsToCancel, string cancellationReason, ObjectParameter refundAmount)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(int));
    
            var seatsToCancelParameter = seatsToCancel.HasValue ?
                new ObjectParameter("SeatsToCancel", seatsToCancel) :
                new ObjectParameter("SeatsToCancel", typeof(int));
    
            var cancellationReasonParameter = cancellationReason != null ?
                new ObjectParameter("CancellationReason", cancellationReason) :
                new ObjectParameter("CancellationReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("CancelTicket", bookingIdParameter, seatsToCancelParameter, cancellationReasonParameter, refundAmount);
        }
    
        public virtual int ChangePassword(string loginId, string oldPassword, string newPassword)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePassword", loginIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual int DeactivatedTrain(Nullable<int> trainId)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("TrainId", trainId) :
                new ObjectParameter("TrainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivatedTrain", trainIdParameter);
        }
    
        public virtual int DeactivateTrain(Nullable<int> trainId)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("TrainId", trainId) :
                new ObjectParameter("TrainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateTrain", trainIdParameter);
        }
    
        public virtual int DeleteUser(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteUser", userIdParameter);
        }
    
        public virtual int GenerateTotalRevenue()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateTotalRevenue");
        }
    
        public virtual ObjectResult<GetAllTrains_Result> GetAllTrains()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllTrains_Result>("GetAllTrains");
        }
    
        public virtual ObjectResult<GetBookedTickets_Result> GetBookedTickets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBookedTickets_Result>("GetBookedTickets");
        }
    
        public virtual int GetCancelledTickets()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCancelledTickets");
        }
    
        public virtual ObjectResult<PrintTicket_Result> PrintTicket(Nullable<int> bookingId)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrintTicket_Result>("PrintTicket", bookingIdParameter);
        }
    
        public virtual ObjectResult<SearchTrains_Result> SearchTrains(string fromStation, string toStation, Nullable<System.DateTime> dateOfTravel)
        {
            var fromStationParameter = fromStation != null ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(string));
    
            var toStationParameter = toStation != null ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(string));
    
            var dateOfTravelParameter = dateOfTravel.HasValue ?
                new ObjectParameter("DateOfTravel", dateOfTravel) :
                new ObjectParameter("DateOfTravel", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchTrains_Result>("SearchTrains", fromStationParameter, toStationParameter, dateOfTravelParameter);
        }
    
        public virtual int SoftDeleteTrain(Nullable<int> trainId)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("TrainId", trainId) :
                new ObjectParameter("TrainId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SoftDeleteTrain", trainIdParameter);
        }
    
        public virtual int UpdateTrainDetails(Nullable<int> trainId, string trainName, string fromStation, string toStation, string trainManagerName, Nullable<int> totalBerths, Nullable<int> availableBerths, Nullable<decimal> fare1, Nullable<decimal> fare2, Nullable<decimal> fare3, Nullable<bool> isActive)
        {
            var trainIdParameter = trainId.HasValue ?
                new ObjectParameter("TrainId", trainId) :
                new ObjectParameter("TrainId", typeof(int));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var fromStationParameter = fromStation != null ?
                new ObjectParameter("FromStation", fromStation) :
                new ObjectParameter("FromStation", typeof(string));
    
            var toStationParameter = toStation != null ?
                new ObjectParameter("ToStation", toStation) :
                new ObjectParameter("ToStation", typeof(string));
    
            var trainManagerNameParameter = trainManagerName != null ?
                new ObjectParameter("TrainManagerName", trainManagerName) :
                new ObjectParameter("TrainManagerName", typeof(string));
    
            var totalBerthsParameter = totalBerths.HasValue ?
                new ObjectParameter("TotalBerths", totalBerths) :
                new ObjectParameter("TotalBerths", typeof(int));
    
            var availableBerthsParameter = availableBerths.HasValue ?
                new ObjectParameter("AvailableBerths", availableBerths) :
                new ObjectParameter("AvailableBerths", typeof(int));
    
            var fare1Parameter = fare1.HasValue ?
                new ObjectParameter("Fare1", fare1) :
                new ObjectParameter("Fare1", typeof(decimal));
    
            var fare2Parameter = fare2.HasValue ?
                new ObjectParameter("Fare2", fare2) :
                new ObjectParameter("Fare2", typeof(decimal));
    
            var fare3Parameter = fare3.HasValue ?
                new ObjectParameter("Fare3", fare3) :
                new ObjectParameter("Fare3", typeof(decimal));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTrainDetails", trainIdParameter, trainNameParameter, fromStationParameter, toStationParameter, trainManagerNameParameter, totalBerthsParameter, availableBerthsParameter, fare1Parameter, fare2Parameter, fare3Parameter, isActiveParameter);
        }
    
        public virtual int UpdateUserPassword(string loginId, string oldPassword, string newPassword)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateUserPassword", loginIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual int UserLoginAndSignup(string loginId, string password, ObjectParameter isExistingUser, ObjectParameter isValid)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserLoginAndSignup", loginIdParameter, passwordParameter, isExistingUser, isValid);
        }
    
        public virtual int ViewAdminDashboard()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ViewAdminDashboard");
        }
    
        public virtual int ViewBookedTicket(Nullable<int> bookingId)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ViewBookedTicket", bookingIdParameter);
        }
    
        public virtual ObjectResult<ViewBookingHistory_Result> ViewBookingHistory(string loginId)
        {
            var loginIdParameter = loginId != null ?
                new ObjectParameter("LoginId", loginId) :
                new ObjectParameter("LoginId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ViewBookingHistory_Result>("ViewBookingHistory", loginIdParameter);
        }
    }
}
